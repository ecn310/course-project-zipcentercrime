-----------------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\Users\wrmaechl\OneDrive - Syracuse University\Documents\GitHub\course-project-zipcentercrime\Reproducibility 
> Package\Data_log.log
  log type:  text
 opened on:  13 Dec 2024, 14:46:28

. 
. 
. 
. *** This should be the file you exported from ArcGIS

. 
. 
. 
. import delimited "2017_Arc_Data.csv"
(encoding automatically selected: UTF-8)
(2 vars, 620,359 obs)

. 
. 
. 
. *** This drops any values that were further than 2500 meters from any treatment center

. 
. 
. 
. drop if near_dist == -1
(205,143 observations deleted)

. 
. 
. 
. *** this is install programs that are usefull in exporting tables

. 
. 
. 
. ssc install outreg2
checking outreg2 consistency and verifying not already installed...
all files already exist and are up to date.

. 
. ssc install estout
checking estout consistency and verifying not already installed...
all files already exist and are up to date.

. 
. 
. 
. *** these commands seperate the data points from ArcGIS into groups based on their calculated distance to the nearest treat
> ment center in meters

. 
. 
. 
. gen dist_group = 100 if near_dist <= 100 
(411,292 missing values generated)

. 
. replace dist_group = 250 if (near_dist <= 250 & near_dist >100)
(13,571 real changes made)

. 
. replace dist_group = 500 if (near_dist <= 500 & near_dist >250)
(43,553 real changes made)

. 
. replace dist_group = 750 if (near_dist <= 750 & near_dist >500)
(46,198 real changes made)

. 
. replace dist_group = 1000 if (near_dist <= 1000 & near_dist >750)
(59,258 real changes made)

. 
. replace dist_group = 1250 if (near_dist <= 1250 & near_dist >1000)
(64,059 real changes made)

. 
. replace dist_group = 1500 if (near_dist <= 1500 & near_dist >1250)
(53,583 real changes made)

. 
. replace dist_group = 1750 if (near_dist <= 1750 & near_dist >1500)
(46,384 real changes made)

. 
. replace dist_group = 2000 if (near_dist <= 2000 & near_dist >1750)
(32,171 real changes made)

. 
. replace dist_group = 2250 if (near_dist <= 2250 & near_dist >2000)
(30,260 real changes made)

. 
. replace dist_group = 2500 if (near_dist <= 2500 & near_dist >2250)
(22,255 real changes made)

. 
. 
. 
. *** these commands are used to make a second variable that is one distance size smaller than its actrual group which allows
>  us to calculate the difference in area between the two radii

. 
. 
. 
. gen dist_group2 = 0 if near_dist <= 100 
(411,292 missing values generated)

. 
. replace dist_group2 = 100 if (near_dist <= 250 & near_dist >100)
(13,571 real changes made)

. 
. replace dist_group2 = 250 if (near_dist <= 500 & near_dist >250)
(43,553 real changes made)

. 
. replace dist_group2 = 500 if (near_dist <= 750 & near_dist >500)
(46,198 real changes made)

. 
. replace dist_group2 = 750 if (near_dist <= 1000 & near_dist >750)
(59,258 real changes made)

. 
. replace dist_group2 = 1000 if (near_dist <= 1250 & near_dist >1000)
(64,059 real changes made)

. 
. replace dist_group2 = 1250 if (near_dist <= 1500 & near_dist >1250)
(53,583 real changes made)

. 
. replace dist_group2 = 1500 if (near_dist <= 1750 & near_dist >1500)
(46,384 real changes made)

. 
. replace dist_group2 = 1750 if (near_dist <= 2000 & near_dist >1750)
(32,171 real changes made)

. 
. replace dist_group2 = 2000 if (near_dist <= 2250 & near_dist >2000)
(30,260 real changes made)

. 
. replace dist_group2 = 2250 if (near_dist <= 2500 & near_dist >2250)
(22,255 real changes made)

. 
. replace dist_group2 = 2500 if (near_dist <= 2750 & near_dist >2500)
(0 real changes made)

. 
. 
. 
. *** this uses the two distance groups calculated above as radii to find the area of that circle and subtract the area of th
> e smaller adjecent circle to calculate the total area of the ring that those calls came from to standardize the data as Cal
> ls per Area

. 
. 
. 
. egen freq = count(near_dist), by(dist_group)

. 
. gen area = (c(pi) * dist_group^2) - (c(pi) * dist_group2^2) 

. 
. 
. 
. *** This is used to get the exact amount of area so that we can divide our count of calls for each distance group once we c
> ollapse the data on line 71

. 
. 
. 
. tab area 

       area |      Freq.     Percent        Cum.
------------+-----------------------------------
   31415.93 |      3,924        0.95        0.95
   164933.6 |     13,571        3.27        4.21
   589048.6 |     43,553       10.49       14.70
   981747.7 |     46,198       11.13       25.83
    1374447 |     59,258       14.27       40.10
    1767146 |     64,059       15.43       55.53
    2159845 |     53,583       12.90       68.43
    2552544 |     46,384       11.17       79.60
    2945243 |     32,171        7.75       87.35
    3337942 |     30,260        7.29       94.64
    3730641 |     22,255        5.36      100.00
------------+-----------------------------------
      Total |    415,216      100.00

. 
. 
. 
. *** taking that difference in area and dividing the amount of calls in that specific distance group by the new ring of area
>  will give us the number of calls per the increase in area from one ring to the next largest

. 
. 
. 
. gen CallxArea = freq / area

. 
. 
. 
. *** these commands create new seperate variables for each distance group 

. 
. 
. 
. gen dist_group_100 = 1 if near_dist <= 100
(411,292 missing values generated)

. 
. gen dist_group_250 = 1 if (near_dist <= 250 & near_dist >100)
(401,645 missing values generated)

. 
. gen dist_group_500 = 1 if (near_dist <= 500 & near_dist >250)
(371,663 missing values generated)

. 
. gen dist_group_750 = 1 if (near_dist <= 750 & near_dist >500)
(369,018 missing values generated)

. 
. gen dist_group_1000 = 1 if (near_dist <= 1000 & near_dist >750)
(355,958 missing values generated)

. 
. gen dist_group_1250 = 1 if (near_dist <= 1250 & near_dist >1000)
(351,157 missing values generated)

. 
. gen dist_group_1500 = 1 if (near_dist <= 1500 & near_dist >1250)
(361,633 missing values generated)

. 
. gen dist_group_1750 = 1 if (near_dist <= 1750 & near_dist >1500)
(368,832 missing values generated)

. 
. gen dist_group_2000 = 1 if (near_dist <= 2000 & near_dist >1750)
(383,045 missing values generated)

. 
. gen dist_group_2250 = 1 if (near_dist <= 2250 & near_dist >2000)
(384,956 missing values generated)

. 
. gen dist_group_2500 = 1 if (near_dist <= 2500 & near_dist >2250)
(392,961 missing values generated)

. 
. 
. 
. 
. 
. 
. 
. *** This graph shows the decline in calls per area over the groups of distances recorded

. 
. 
. 
. graph bar CallxArea, over(dist_group) title("Calls by Area for Each Distance") ytitle("Calls By Area") b1title("Distance Gr
> oups")

. 
. graph export "Visual Graphics\Calls_Distance.png", replace
file Visual Graphics\Calls_Distance.png saved as PNG format

. 
. 
. 
. *** This command colapses our data down, Using the various variables we created for each seperate distance groups we can no
> w collapse the data by the count of how many of our observations are within each individual distance groups by the id numbe
> r for the treatment center it was nearest.

. 
. 
. 
. collapse (count) dist_group_100 dist_group_250 dist_group_500 dist_group_750 dist_group_1000 dist_group_1250 dist_group_150
> 0 dist_group_1750 dist_group_2000 dist_group_2250 dist_group_2500, by(near_fid)

. 
. 
. 
. *** once our data is collapsed we use these commands to standardize the number of calls by the areas of the rings we calcul
> ated previously 

. 
. 
. 
. replace dist_group_100 = (dist_group_100 / 31415.9265) * 1000000
variable dist_group_100 was long now double
(36 real changes made)

. 
. replace dist_group_250 = (dist_group_250 / 164933.6143) * 1000000
variable dist_group_250 was long now double
(43 real changes made)

. 
. replace dist_group_500 = (dist_group_500 / 589048.6225) * 1000000
variable dist_group_500 was long now double
(43 real changes made)

. 
. replace dist_group_750 = (dist_group_750 / 981747.7042) * 1000000
variable dist_group_750 was long now double
(43 real changes made)

. 
. replace dist_group_1000 = (dist_group_1000 / 1374446.786) * 1000000
variable dist_group_1000 was long now double
(43 real changes made)

. 
. replace dist_group_1250 = (dist_group_1250 / 1767145.868) * 1000000
variable dist_group_1250 was long now double
(43 real changes made)

. 
. replace dist_group_1500 = (dist_group_1500 / 2159844.949) * 1000000
variable dist_group_1500 was long now double
(42 real changes made)

. 
. replace dist_group_1750 = (dist_group_1750 / 2552544.031) * 1000000
variable dist_group_1750 was long now double
(39 real changes made)

. 
. replace dist_group_2000 = (dist_group_2000 / 2945243.113) * 1000000
variable dist_group_2000 was long now double
(36 real changes made)

. 
. replace dist_group_2250 = (dist_group_2250 / 3337942.194) * 1000000
variable dist_group_2250 was long now double
(30 real changes made)

. 
. replace dist_group_2500 = (dist_group_2500 / 3730641.276) * 1000000
variable dist_group_2500 was long now double
(28 real changes made)

. 
. 
. 
. 
. 
. *** Now we will use a paired t test to measure the statisical likelyhood that one ring will have greater median of calls co
> mpared to the next larger ring

. 
. 
. 
. table (command) (result), command(Mean_1=r(mu_1) Mean_2=r(mu_2) Difference= (r(mu_1) -r(mu_2)) p_value = r(p) Tailed_p = r(
> p_u): ttest dist_group_100 == dist_group_250) command(Mean_1=r(mu_1) Mean_2=r(mu_2) Difference= (r(mu_1) -r(mu_2)) p_value 
> = r(p) Tailed_p = r(p_u): ttest dist_group_250 == dist_group_500) command(Mean_1=r(mu_1) Mean_2=r(mu_2) Difference= (r(mu_1
> ) -r(mu_2)) p_value = r(p) Tailed_p = r(p_u): ttest dist_group_500 == dist_group_750) command(Mean_1=r(mu_1) Mean_2=r(mu_2)
>  Difference= (r(mu_1) -r(mu_2)) p_value = r(p) Tailed_p = r(p_u): ttest dist_group_750 == dist_group_1000) command(Mean_1=r
> (mu_1) Mean_2=r(mu_2) Difference= (r(mu_1) -r(mu_2)) p_value = r(p) Tailed_p = r(p_u): ttest dist_group_1000 == dist_group_
> 1250) command(Mean_1=r(mu_1) Mean_2=r(mu_2) Difference= (r(mu_1) -r(mu_2)) p_value = r(p) Tailed_p = r(p_u): ttest dist_gro
> up_1250 == dist_group_1500) command(Mean_1=r(mu_1) Mean_2=r(mu_2) Difference= (r(mu_1) -r(mu_2)) p_value = r(p) Tailed_p = 
> r(p_u): ttest dist_group_1500 == dist_group_1750) command(Mean_1=r(mu_1) Mean_2=r(mu_2) Difference= (r(mu_1) -r(mu_2)) p_va
> lue = r(p) Tailed_p = r(p_u): ttest dist_group_1750 == dist_group_2000) command(Mean_1=r(mu_1) Mean_2=r(mu_2) Difference= (
> r(mu_1) -r(mu_2)) p_value = r(p) Tailed_p = r(p_u): ttest dist_group_2000 == dist_group_2250) command(Mean_1=r(mu_1) Mean_2
> =r(mu_2) Difference= (r(mu_1) -r(mu_2)) p_value = r(p) Tailed_p = r(p_u): ttest dist_group_2250 == dist_group_2500) nformat
> (%9.3f) stars(p_value 0.1 "*" 0.05 "**" 0.01 "***", shownote) name(t_test) replace

---------------------------------------------------------------------------------------------------------
                                         |    Mean_1     Mean_2   Difference   p_value   Tailed_p   stars
-----------------------------------------+---------------------------------------------------------------
ttest dist_group_100 == dist_group_250   |  2838.745   1870.036      968.709     0.056      0.028       *
ttest dist_group_2250 == dist_group_2500 |   206.033    135.579       70.455     0.004      0.002     ***
ttest dist_group_250 == dist_group_500   |  1870.036   1680.406      189.630     0.491      0.245        
ttest dist_group_500 == dist_group_750   |  1680.406   1069.475      610.931     0.007      0.003     ***
ttest dist_group_750 == dist_group_1000  |  1069.475    979.865       89.610     0.392      0.196        
ttest dist_group_1000 == dist_group_1250 |   979.865    823.863      156.002     0.006      0.003     ***
ttest dist_group_1250 == dist_group_1500 |   823.863    563.835      260.028     0.000      0.000     ***
ttest dist_group_1500 == dist_group_1750 |   563.835    412.993      150.842     0.040      0.020      **
ttest dist_group_1750 == dist_group_2000 |   412.993    248.251      164.742     0.001      0.001     ***
ttest dist_group_2000 == dist_group_2250 |   248.251    206.033       42.218     0.039      0.020      **
---------------------------------------------------------------------------------------------------------
*** p<.01, ** p<.05, * p<.1

. 
. collect set t_test
(current collection is t_test)

. 
. collect export "Visual Graphics\t_test.tex", replace
(collection t_test exported to file Visual Graphics\t_test.tex)

. 
. 
. 
. 
. 
. *** This will run a ratio for each pair of distance groups

. 
. 
. 
. ratio (dist_group_100/dist_group_250) (dist_group_250/dist_group_500) (dist_group_500/dist_group_750) (dist_group_750/dist_
> group_1000) (dist_group_1000/dist_group_1250) (dist_group_1250/dist_group_1500) (dist_group_1500/dist_group_1750) (dist_gro
> up_1750/dist_group_2000) (dist_group_2000/dist_group_2250) (dist_group_2250/dist_group_2500), fvwrap(1)

Ratio estimation                            Number of obs = 44

     _ratio_1: dist_group_100/dist_group_250
     _ratio_2: dist_group_250/dist_group_500
     _ratio_3: dist_group_500/dist_group_750
     _ratio_4: dist_group_750/dist_group_1000
     _ratio_5: dist_group_1000/dist_group_1250
     _ratio_6: dist_group_1250/dist_group_1500
     _ratio_7: dist_group_1500/dist_group_1750
     _ratio_8: dist_group_1750/dist_group_2000
     _ratio_9: dist_group_2000/dist_group_2250
    _ratio_10: dist_group_2250/dist_group_2500

--------------------------------------------------------------
             |             Linearized
             |      Ratio   std. err.     [95% conf. interval]
-------------+------------------------------------------------
    _ratio_1 |   1.518016    .305492       .901933      2.1341
    _ratio_2 |   1.112848   .1703623      .7692794    1.456416
    _ratio_3 |   1.571244   .1966827      1.174596    1.967893
    _ratio_4 |   1.091451   .1104992      .8686081    1.314294
    _ratio_5 |   1.189354   .0748615      1.038382    1.340327
    _ratio_6 |   1.461179   .1268808      1.205299    1.717058
    _ratio_7 |   1.365242   .1935897      .9748308    1.755652
    _ratio_8 |    1.66361   .2204068      1.219117    2.108103
    _ratio_9 |   1.204906    .110774      .9815093    1.428303
   _ratio_10 |   1.519659   .1688579      1.179124    1.860193
--------------------------------------------------------------

. 
. 
. 
. 
. 
. *** This creates a matrix to store the results

. 
. 
. 
. matrix ratio_results = J(10, 6, 0)

. 
. 
. 
. *** This takes the numerical data from the ratio command and stores the ratio result

. 
. 
. 
. matrix ratio_results[1,1] = e(b)[1,1]

. 
. matrix ratio_results[2,1] = e(b)[1,2]

. 
. matrix ratio_results[3,1] = e(b)[1,3]

. 
. matrix ratio_results[4,1] = e(b)[1,4]

. 
. matrix ratio_results[5,1] = e(b)[1,5]

. 
. matrix ratio_results[6,1] = e(b)[1,6]

. 
. matrix ratio_results[7,1] = e(b)[1,7]

. 
. matrix ratio_results[8,1] = e(b)[1,8]

. 
. matrix ratio_results[9,1] = e(b)[1,9]

. 
. matrix ratio_results[10,1] = e(b)[1,10]

. 
. 
. 
. *** This takes the numerical data from the ratio command and stores the Standard Error

. 
. 
. 
. matrix ratio_results[1,2] = r(table)[2,1]

. 
. matrix ratio_results[2,2] = r(table)[2,2]

. 
. matrix ratio_results[3,2] = r(table)[2,3]

. 
. matrix ratio_results[4,2] = r(table)[2,4]

. 
. matrix ratio_results[5,2] = r(table)[2,5]

. 
. matrix ratio_results[6,2] = r(table)[2,6]

. 
. matrix ratio_results[7,2] = r(table)[2,7]

. 
. matrix ratio_results[8,2] = r(table)[2,8]

. 
. matrix ratio_results[9,2] = r(table)[2,9]

. 
. matrix ratio_results[10,2] = r(table)[2,10]

. 
. 
. 
. *** This takes the numerical data from the ratio command and stores the lower Confidence Interval

. 
. 
. 
. matrix ratio_results[1,3] = r(table)[5,1]

. 
. matrix ratio_results[2,3] = r(table)[5,2]

. 
. matrix ratio_results[3,3] = r(table)[5,3]

. 
. matrix ratio_results[4,3] = r(table)[5,4]

. 
. matrix ratio_results[5,3] = r(table)[5,5]

. 
. matrix ratio_results[6,3] = r(table)[5,6]

. 
. matrix ratio_results[7,3] = r(table)[5,7]

. 
. matrix ratio_results[8,3] = r(table)[5,8]

. 
. matrix ratio_results[9,3] = r(table)[5,9]

. 
. matrix ratio_results[10,3] = r(table)[5,10]

. 
. 
. 
. *** This takes the numerical data from the ratio command and stores the upper Confidence Interval

. 
. 
. 
. matrix ratio_results[1,4] = r(table)[6,1]

. 
. matrix ratio_results[2,4] = r(table)[6,2]

. 
. matrix ratio_results[3,4] = r(table)[6,3]

. 
. matrix ratio_results[4,4] = r(table)[6,4]

. 
. matrix ratio_results[5,4] = r(table)[6,5]

. 
. matrix ratio_results[6,4] = r(table)[6,6]

. 
. matrix ratio_results[7,4] = r(table)[6,7]

. 
. matrix ratio_results[8,4] = r(table)[6,8]

. 
. matrix ratio_results[9,4] = r(table)[6,9]

. 
. matrix ratio_results[10,4] = r(table)[6,10]

. 
. 
. 
. *** This takes the numerical data from the ratio command and stores the T score

. 
. 
. 
. matrix ratio_results[1,5] = r(table)[3,1]

. 
. matrix ratio_results[2,5] = r(table)[3,2]

. 
. matrix ratio_results[3,5] = r(table)[3,3]

. 
. matrix ratio_results[4,5] = r(table)[3,4]

. 
. matrix ratio_results[5,5] = r(table)[3,5]

. 
. matrix ratio_results[6,5] = r(table)[3,6]

. 
. matrix ratio_results[7,5] = r(table)[3,7]

. 
. matrix ratio_results[8,5] = r(table)[3,8]

. 
. matrix ratio_results[9,5] = r(table)[3,9]

. 
. matrix ratio_results[10,5] = r(table)[3,10]

. 
. 
. 
. *** This takes the numerical data from the ratio command and stores the P value

. 
. 
. 
. matrix ratio_results[1,6] = r(table)[4,1]

. 
. matrix ratio_results[2,6] = r(table)[4,2]

. 
. matrix ratio_results[3,6] = r(table)[4,3]

. 
. matrix ratio_results[4,6] = r(table)[4,4]

. 
. matrix ratio_results[5,6] = r(table)[4,5]

. 
. matrix ratio_results[6,6] = r(table)[4,6]

. 
. matrix ratio_results[7,6] = r(table)[4,7]

. 
. matrix ratio_results[8,6] = r(table)[4,8]

. 
. matrix ratio_results[9,6] = r(table)[4,9]

. 
. matrix ratio_results[10,6] = r(table)[4,10]

. 
. 
. 
. *** Display the results

. 
. 
. 
. matrix list ratio_results

ratio_results[10,6]
            c1         c2         c3         c4         c5         c6
 r1  1.5180164  .30549199  .90193305  2.1340997  4.9690873   .0000112
 r2  1.1128477  .17036232  .76927937  1.4564161  6.5322411  6.145e-08
 r3  1.5712441   .1966827  1.1745956  1.9678925  7.9887255  4.918e-10
 r4  1.0914509  .11049919  .86860808  1.3142938  9.8774562  1.253e-12
 r5  1.1893545  .07486149  1.0383819   1.340327    15.8874  1.320e-19
 r6  1.4611786   .1268808  1.2052991  1.7170581  11.516152  1.004e-14
 r7  1.3652415  .19358966  .97483079  1.7556523  7.0522442  1.081e-08
 r8  1.6636101  .22040681  1.2191174  2.1081028   7.547907  2.090e-09
 r9  1.2049064    .110774   .9815093  1.4283034  10.877158  6.328e-14
r10  1.5196585  .16885788  1.1791241  1.8601929  8.9996305  1.913e-11

. 
. 
. 
. *** This changes the row and column names

. 
. matrix rownames ratio_results = "100/250" "250/500" "500/750" "750/1000" "1000/1250" "1250/1500" "1500/1750" "1750/2000" "2
> 000/2250" "2250/2500"

. 
. 
. 
. matrix colnames ratio_results = "Ratio" "Std. Err." "[95% Conf." "Interval]" "T score" "P value"

. esttab

----------------------------
                      (1)   
                    Ratio   
----------------------------
_ratio_1            1.518***
                   (4.97)   

_ratio_2            1.113***
                   (6.53)   

_ratio_3            1.571***
                   (7.99)   

_ratio_4            1.091***
                   (9.88)   

_ratio_5            1.189***
                  (15.89)   

_ratio_6            1.461***
                  (11.52)   

_ratio_7            1.365***
                   (7.05)   

_ratio_8            1.664***
                   (7.55)   

_ratio_9            1.205***
                  (10.88)   

_ratio_10           1.520***
                   (9.00)   
----------------------------
N                      44   
----------------------------
t statistics in parentheses
* p<0.05, ** p<0.01, *** p<0.001

. esttab matrix(ratio_results)

------------------------------------------------------------------------------------------
             ratio_resu~s                                                                 
                    Ratio    Std. Err.   [95% Conf.    Interval]      T score      P value
------------------------------------------------------------------------------------------
100/250          1.518016      .305492      .901933       2.1341     4.969087     .0000112
250/500          1.112848     .1703623     .7692794     1.456416     6.532241     6.14e-08
500/750          1.571244     .1966827     1.174596     1.967893     7.988725     4.92e-10
750/1000         1.091451     .1104992     .8686081     1.314294     9.877456     1.25e-12
1000/1250        1.189354     .0748615     1.038382     1.340327      15.8874     1.32e-19
1250/1500        1.461179     .1268808     1.205299     1.717058     11.51615     1.00e-14
1500/1750        1.365242     .1935897     .9748308     1.755652     7.052244     1.08e-08
1750/2000         1.66361     .2204068     1.219117     2.108103     7.547907     2.09e-09
2000/2250        1.204906      .110774     .9815093     1.428303     10.87716     6.33e-14
2250/2500        1.519659     .1688579     1.179124     1.860193      8.99963     1.91e-11
------------------------------------------------------------------------------------------

. esttab matrix(ratio_results) using "Visual Graphics\ratio_results.tex", alignment(1||c|c|cc|c|c) longtab top("\hline")title
> ("Ratio Analysis") replace
file \hline not found
r(601);

. esttab matrix(ratio_results) using "Visual Graphics\ratio_results.tex", alignment(1||c|c|cc|c|c) longtab top("\hline", raw)
>  title("Ratio Analysis") replace
file \hline , raw not found
r(601);

. esttab matrix(ratio_results) using "Visual Graphics\ratio_results.tex", alignment(1||c|c|cc|c|c) lines title("Ratio Analysi
> s") replace
(output written to Visual Graphics\ratio_results.tex)

. log close
      name:  <unnamed>
       log:  C:\Users\wrmaechl\OneDrive - Syracuse University\Documents\GitHub\course-project-zipcentercrime\Reproducibility 
> Package\Data_log.log
  log type:  text
 closed on:  13 Dec 2024, 14:54:09
-----------------------------------------------------------------------------------------------------------------------------
